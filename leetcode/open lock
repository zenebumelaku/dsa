class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        // Map the next slot digit for each current slot digit.
        unordered_map<char, char> nextSlot = {
            {'0', '1'}, 
            {'1', '2'}, 
            {'2', '3'}, 
            {'3', '4'}, 
            {'4', '5'},
            {'5', '6'}, 
            {'6', '7'}, 
            {'7', '8'}, 
            {'8', '9'}, 
            {'9', '0'}
        };
        // Map the previous slot digit for each current slot digit.
        unordered_map<char, char> prevSlot = {
            {'0', '9'}, 
            {'1', '0'}, 
            {'2', '1'}, 
            {'3', '2'}, 
            {'4', '3'},
            {'5', '4'}, 
            {'6', '5'}, 
            {'7', '6'}, 
            {'8', '7'}, 
            {'9', '8'}
        };

        int ans = 0;
        unordered_set<string> visited(begin(deadends),end(deadends));
        queue<string> q;
        if(visited.count("0000")){
            return -1;
        }
        q.push("0000");
        visited.insert("0000");
        while(!q.empty()){
            int n = q.size();
            while(n--){
                string currComb = q.front();
                q.pop();
                if(currComb == target){
                    return ans;
                }
                for(int i=0;i<4;i++){
                    string newComb = currComb;
                    newComb[i] = nextSlot[currComb[i]];
                    if(!visited.count(newComb)){
                        q.push(newComb);
                        visited.insert(newComb);
                    }
                    newComb = currComb;
                    newComb[i] = prevSlot[currComb[i]];
                    if(!visited.count(newComb)){
                        q.push(newComb);
                        visited.insert(newComb);
                    }
                }
            }
            ans+=1;
        }
        return -1;
    }
};
