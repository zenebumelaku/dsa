
class DisjointSet {
public:
    vector<int> parent, size;

    DisjointSet(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }
   
    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
    //Function to find unit area of the largest region of 1s
    int n=grid.size();
    int m=grid[0].size();
        int dr[4]={-1,0,1,0};
        int dc[4]={0,1,0,-1};
      DisjointSet ds(n*m);
       int vis[n][n],cnt=0;
       memset(vis,0,sizeof vis);
       int mx=0;
       for(int row =0;row<n;row++)
       {
           for(int col=0;col<m;col++)
           {
               if(grid[row][col]==1)
               {
                int nodeno=row*m+col;
                for(int ind=0;ind<4;ind++)
                {
                 int newrow=row+dr[ind];
                 int newcol=col+dc[ind];
                 if(newrow<n and newrow>=0 and newcol>=0 and newcol<m and grid[newrow][newcol]==1)
                 {
                 int adjnode=newrow*m+newcol;
                 if(ds.findUPar(adjnode)!=ds.findUPar(nodeno))
                 {
                     ds.unionBySize(nodeno,adjnode);
                 }
                 }    
                 }
               } else
               {
                   ds.size[row*m+col]=0;
               }
           }
       }
       for(int i=0;i<n*m;i++)
       {
           mx=max(mx,ds.size[ds.findUPar(i)]);
       }
       return mx;    
    }
};
