class Solution {
public:
    bool dfs(int node, int end, double &prod, vector<vector<pair<int, double>>>& adj, vector<int>& vis) {
        vis[node] = 1;
        if (node == end) return true;
        for (auto& it : adj[node]) {
            int next = it.first;
            double val = it.second;
            if (!vis[next]) {
                double temp = prod;
                prod *= val;
                if (dfs(next, end, prod, adj, vis)) {
                    return true;
                }
                prod = temp;
            }
        }
        return false;
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, int> mp;
        int id = 0;
        for (auto eq : equations) {
            if (!mp.count(eq[0])) mp[eq[0]] = id++;
            if (!mp.count(eq[1])) mp[eq[1]] = id++;
        }
        vector<vector<pair<int, double>>> adj(id);
        for (int i = 0; i < equations.size(); ++i) {
            int u = mp[equations[i][0]];
            int v = mp[equations[i][1]];
            adj[u].push_back({v, values[i]});
            adj[v].push_back({u, 1.0 / values[i]});
        }
        vector<double> ans;
        for (auto q : queries) {
            if (!mp.count(q[0]) || !mp.count(q[1])) {
                ans.push_back(-1.0);
                continue;
            }
            int u = mp[q[0]];
            int v = mp[q[1]];
            double prod = 1.0;
            vector<int> vis(id, 0);
            if (dfs(u, v, prod, adj, vis)) {
                ans.push_back(prod);
            } else {
                ans.push_back(-1.0);
            }
        }
        return ans;
    }
};
