/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 class Result{
    public:
       int maxLength=0;
       TreeNode* ancestor=nullptr;
 };

class Solution {
public:
    
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        Result *res=traverse(root, 0);
        return res->ancestor;
    }
    Result* traverse(TreeNode* root, int length){
        Result *res=new Result();
        if(root==nullptr){
            return res;
        }
        if(root->left == nullptr && root->right==nullptr){
            res->maxLength=length+1;
            res->ancestor=root;
            return res;
        }
        Result *resLeft=traverse(root->left, length+1);
        Result *resRight=traverse(root->right, length+1);

        if(resLeft->maxLength > resRight->maxLength){
            res->maxLength=resLeft->maxLength;
            res->ancestor=resLeft->ancestor; 
        }else if(resLeft->maxLength == resRight->maxLength){
            res->maxLength=resLeft->maxLength;
            res->ancestor=root; 
        }
        else{
            res->maxLength=resRight->maxLength;
            res->ancestor=resRight->ancestor;
        }
        return res;
    }
};
