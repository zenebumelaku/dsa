class Solution {
public:
    bool check(string s1,string s2){
        int n1=s1.size();
        int n2=s2.size();
        if(n1!=n2)
        return false;
        int cnt=0;
        int i=0;
        while(i<n1){
            if(s1[i]!=s2[i])
            cnt++;
            i++;
        }
        if(cnt>=2)
        return false;
        return true;
    }
    int bfs(vector<vector<int>>&g,int src,int des){
        if(src==des)
        return 0;
        queue<int>q;
        int ans=0;
        int n=g.size();
        vector<int>vis(n,-1);
        vis[src]=1;
        q.push(src);
        while(!q.empty()){
            int x=q.size();
            while(x--){
                int temp=q.front();
                if(temp==des)
                return ans+1;
                for(int j=0;j<n;j++){
                    if(g[temp][j]==1&&vis[j]==-1){
                        q.push(j);
                        vis[j]=1;
                    }
                }
                q.pop();
            }
            ans++;
        }
        return 0;
    }
    int ladderLength(string beginWord, string endWord, vector<string>& List) {
        List.insert(List.begin(),beginWord);
       // auto it=List.find(endWord);
        int des=-1;
        int n=List.size();
        for(int i=1;i<n;i++){
            if(List[i]==endWord){
                des=i;
                break;
            }
        }
        if(des==-1)
        return 0;
        vector<vector<int>>graph(n,vector<int>(n,0));
        for(int i=0;i<n;i++){
            string s1=List[i];
            for(int j=1;j<n;j++){
                string s2=List[j];
                if(i==j)
                continue;
                if(check(s1,s2))
                graph[i][j]=1;
            }
        }
        //construct the algorithm bfs from 0 to des
        int ans=0;
        int src=0;
        return bfs(graph,src,des);
    }
};
/*
    we have to construct a grph of n*n ; n is number of 
    //start bfs from root till we not get the endWord
*/
