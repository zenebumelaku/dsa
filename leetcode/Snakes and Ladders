class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n=board.size();
        vector<int>temp;
        bool ko=true;

        for(int i=n-1;i>=0;i--){
            if(ko){
                for(int j=0;j<n;j++){
                    temp.push_back(board[i][j]);
                }
            }else{
                for(int j=n-1;j>=0;j--){
                    temp.push_back(board[i][j]);
                }
            }
            ko=!ko;
        }
        vector<bool>vis(n*n,false);
        queue<pair<int,int>>q;
        q.push({0,0});
        int ans=1e9;
        vis[0]=true;
        
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            int index=it.first;
            int steps=it.second;

            if(index >= n*n-1)
            return steps;

            for(int i=1;i<=6;i++){
                if((index+i) < (n*n) && !vis[index+i]){
                if(temp[index+i] != -1){
                    vis[index+i]=true;
                    q.push({temp[index+i]-1,steps+1});
                }
                else if(temp[index+i] ==-1 && !vis[index+i]){
                    vis[index+i]=true;
                    q.push({index+i,steps+1});
                }
                }
            }
        }  
        return -1;     
    }
};
